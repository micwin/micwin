I"”;<p>Hin und wieder kristallisiert sich in meiner t√§glichen Arbeit 
ein Problem heraus, das sich mit Software l√∂sen l√§sst. Dann setze 
ich mich hin und code einfach was um exakt dieses Problem zu l√∂sen.</p>

<p>Nat√ºrlich passt das nicht in meinen Lebenslauf und meine 
professionelle Projektliste, denn erstens bekomme ich daf√ºr ja kein Geld und 
manche Leute w√ºrden sowas als Hobby einstufen, und da ich ja immer 
dazulerne, sind zweitens die meisten meiner privaten Projekte sowieso nie 
abgeschlossen.</p>

<p>Dies hier ist also der Platz um diese meine Dinge unterzubringen.</p>

<h2 id="clici-ab-2020">clici (ab 2020)</h2>

<p>Ich arbeite nun schon einige Zeit als DevOps-Ingenieur; das bedeutet, 
ich erstelle und warte Skripte, die Software automatisch baut, testet 
und deployt. Dabei helfen mir sogenannte ci/cd-Server wie Jenkins, 
GitLab und Azure. Allesamt sind dies m√§chtige Tools, 
mit meiner Meinung nach spezifischen und relevanten Unterschieden und St√§rken; 
sie haben aber auch spezielle Schw√§chen, die mich hin und wieder in den Wahnsinn treiben:</p>

<ul>
  <li>
    <p>wenn man mit einer Bash-√§hnlichen Sprache arbeiten will, dann geht das bei allen; allerdings eben nur eine bash-_√§hnliche_ Sprache, die eben nicht ganz an bash dran ist; so unterscheiden sich z.B. die Piping-Mechanismen, der Umgang mit Exit-Codes, der Umgang mit special characters, loops sind problematisch, die line separator, das comment handling,‚Ä¶ und und und. Kurz und gut: du kannst nicht einfach ein ganz normales Bash-Skript automatisch von irgendwo mit cURL downloaden  und es als Task in dein CI integrieren; es gibt noch vieles anzupassen und zu debuggen, mit all den Konsequenzen f√ºr das Updaten der Skripte, wenn sie sich in der urspr√ºnglichen Quelle ge√§ndert haben sollten. Wie mein Sohn zu sagen pflegt: Schmutz.</p>
  </li>
  <li>
    <p>Du kannst die Skripte nicht einfach so mal lokal auf deiner Kiste laufen lassen und so testen. Nein, wenn du Gl√ºck hast, hast du ein Linting-Programm oder eine Linting-Website, das/die dir die <strong>syntaktische Korrektheit</strong> deines CI-Skripts testet. Wenn du kein Gl√ºck hast, musst du das Skript √§ndern, manchmal committen und hochladen, und erst wenn es l√§uft - weisst du dass es l√§uft. Und selbst wenn du einen Linter hast, heisst das ja nicht dass die Skripte dann automatisch laufen; committen und pushen ist immer noch der regelm√§ssige Arbeitsschritt und genau am Anfang, wenn du die Pipeline erstellst, extrem nervenaufreibend. Insbesondere wenn du - wie ich - dauernd Vertippser hast!</p>
  </li>
  <li>
    <p>Versuch doch mal, denselben CI-Workflow auf zweierlei CI-Servern laufen zu lassen, sagen wir auf Microsoft Team Foundation Server  und Atlassian Bamboo. Es l√§uft darauf hinaus, dass du zweierlei Skripte entwickelst und maintainst. Das ist gar nicht mal so selten, z.B. wenn du dieselbe Codebase mit einem internen Jenkins einerseits und einem kundenbasierten Gitlab andererseits baust.</p>
  </li>
  <li>
    <p>Wechsel doch mal mit deinem extensiven, viele Teams umfassenden CI-Workflow von Jenkins nach GitLab. Lange Rede kurz: Vergiss es. Du wirst jedes einzelne Projekt √ºbersetzen m√ºssen. Ich nenne sowas Vendor Lock In. Was kein Ding w√§re wenn das Tool okay w√§re aber - naja, du kennst Jenkins. Das Chuck Norris -Plugin war mal witzig gemeint, ist f√ºr meinen Geschmack, gerade bei Jenkins, zu nahe an der Realit√§t.</p>
  </li>
</ul>

<p>Irgendwann ist mir einfach der Kragen geplatzt und ich habe <a href="https://metafence.gitlab.io/clici/">clici</a> 
entwickelt:</p>

<ul>
  <li>
    <p>da wo bash l√§uft, l√§uft auch clici; also auch bei dir auf der lokalen Maschine, in der cygwin-Box, wenns denn sein muss, oder in einem Docker container</p>
  </li>
  <li>
    <p>du musst clici nicht installieren (obwohl clici dich dabei unterst√ºtzt), es gibt keine Abh√§ngigkeiten ausser bash und which, und es ist lediglich ~ 8kb gross</p>
  </li>
  <li>
    <p>kooperiert mit jedem CI-Server</p>
  </li>
  <li>
    <p>dead simple</p>
  </li>
  <li>
    <p>zur Not kannst du auch python verwenden</p>
  </li>
</ul>

<p>Interessiert? Hier nochmal  der Link zur Homepage: <a href="https://metafence.gitlab.io/clici/">clici</a></p>

<h2 id="ssh-relais-2017">ssh-relais (2017)</h2>

<p>Und irgendwann hatte ich auf einem Rechner mal Zugriff auf Docker, aber keine M√∂glichkeit, einen SSH-Demon zu installieren. 
Will sagen - ich musste mich per RDP auf einen Terminal Server einw√§hlen, von dem aus es dann per Telnet(!) und ohne Root-Rechte weiterging. Grausig.</p>

<p>Also baute ich mir ein <a href="https://github.com/micwin/ssh-relais">docker image</a> und ver√∂ffentlichte es auf <a href="https://hub.docker.com/repository/docker/outpost/ssh-relais">docker hub</a> und was soll ich sagen - das ist das bisher 
bei weitem N√ºtzlichste meiner Projekte gewesen. Es ist sogar so, dass ich ohne dieses Know-How ein sehr profitables, 
anderes Projekt gar nicht h√§tte abwickeln k√∂nnen!</p>

<p>Man kann das Image f√ºr so viele Dinge benutzen:</p>

<ul>
  <li>
    <p>Ad-hoc Jump Hosts! Das ist der bei weitem h√§ufigste Einsatzzweck, und daf√ºr habe ich das Image ja auch erschaffen. 
Also eine Art ‚ÄúBr√ºcke‚Äù zwischen zwei eigentlich nicht miteinander verbundenen Systemen</p>
  </li>
  <li>
    <p>Ad-hoc X-Hosts! Du kannst tats√§chlich deine gesamte X11-Kommunikation durch das ssh-relais redirecten. Sehr n√ºtzlich 
in einem Projekt, in dem es darum ging, den Build-Prozess einer tcl/tk-basierten GUI in einen Container zu verschieben.
Der ssh-relais wurde als daemon gestartet, der build-Prozess wurde dann per ssh -XC gestartet. Auf dem 
Bildschirm des Entwicklers/Testers erschien die GUI des Compilats, bereit f√ºr Tests. Das hat √ºberraschend gut 
funktioniert.</p>
  </li>
  <li>
    <p>wenn man die Home-Directories des ssh-relais im tmpfs des Docker Hosts platziert, hat man eine super sichere 
bash-shell, die sofort allen content verliert sobald jemand mit dem Container rumspielt.</p>
  </li>
</ul>

<p>Schaus dir an, es ist sehr praktisch.</p>

<h2 id="ticino-events-aka-tinevents-2010---2015">ticino events a.k.a. tinEvents (2010 - 2015)</h2>

<p>Ja, ich gestehe, ich war mal ein Wicket-Fan. Wicket, das war ein Web-Framework vergleichbar mit react oder jsf,
und aus meiner Sicht der beste Web-Framework in der Pr√§-Websocket-Welt. Ich weiss, ich weiss, Wicket hat sich auch 
weiterentwickelt, aber ich finde inzwischen andere Konzepte zielf√ºhrender. Anyway,‚Ä¶</p>

<p>Wie war ich aufgeregt als Wicket dann Events eingef√ºhrt hat! Da konnte man, quer durch die Applikation und auch bis zu 
den Clients events feuern, losgel√∂st von irgendwelchen Methodenna·∏øen und ohne sich Gedanken machen zu m√ºssen, wer die 
Daten √ºberhaupt empf√§ngt und was im Fehlerfall passiert,‚Ä¶</p>

<p>So wurde es jedenfalls angek√ºndigt, oder vielleicht kam es bei mir auch nur so an. Die Implementierung der 
Wicket-Events waren dann n√§mlich doch nicht so einfach und generisch:</p>

<ul>
  <li>
    <p>man musste eine Interface-Klasse erstellen, speziell f√ºr die Methodennamen der Sender und der Empf√§nger. D.h.<br />
sowohl der Sender als auch der Empf√§nger mussten das Interface implementieren. 
Dazu kam dann noch die Event-Klasse.</p>
  </li>
  <li>
    <p>die Events konnten erst ab einem bestimmten Zeitpunkt im Lebenszyklus der 
Wicket-Applikation empfangen werden. Will sagen: nicht w√§hrend der Initialisierungsphase der Beans im 
damals aufkommenden Spring-Framework. Ich konnte also keine ‚ÄúCreated‚Äù und ‚ÄúInitialized‚Äù-Events 
feuern und empfangen um meine eigenen Komponenten on-the-fly zu konfigurieren.</p>
  </li>
  <li>
    <p>die Events wurden nicht im Cluster verteilt. Wenn deine Wicket-Anwendung also in einem JEE-Cluster 
betrieben wurde, blieben die Events lokal.</p>
  </li>
  <li>
    <p>die Events beschr√§nkten sich strikt auf Wicket, und hatten auch starke Abh√§ngigkeiten zu Wicket. Ja ich weiss, das 
h√§tte ich mir auch vorher denken k√∂nnen; aber die Wicket-Leute hatten bis dahin einen nicht-intrusiven Charakter 
gefahren,  sodass es leicht war, Wicket-Module zu schreiben die du auch woanders verwenden kannst. Leider sind Events,
vergleichbar mit IPC, auf einer so hohen Abstraktionsebene, dass ich davon wirklich √ºberrascht wurde. 
Swing-Anwendungen mit Wicket-Events ausstatten? Ein Ding der Unm√∂glichkeit.</p>
  </li>
</ul>

<p>Also setzte ich mich hin und erdachte mit den perfekten Event-Framework, mit folgenden Anforderungen:</p>

<ul>
  <li>
    <p>der Framework musste <strong>standalone</strong> betreibbar sein, also am besten gar keine Abh√§ngigkeiten zu 
Drittanbietern besitzen</p>
  </li>
  <li>
    <p>er musste sehr schnell initialisierbar und abschaltbar sein (sonst w√§re tdd eine qual gewesen)</p>
  </li>
  <li>
    <p>er musste gut mit dem Java Garbage Collector klarkommen, weil sonst Memory Holes an der Tagesordnung w√§ren</p>
  </li>
  <li>
    <p>er musste m√∂glich sein, dass Methoden und Objekte, die nichts vom Event Framework wussten, sowohl senden als auch empfangen konnten</p>
  </li>
  <li>
    <p>er musste leicht zu erweitern sein, z.B. durch einen zuschaltbaren Internet-Transport</p>
  </li>
  <li>
    <p>es musste mit dem IoC-Pattern von Spring zurecht kommen.</p>
  </li>
</ul>

<p>Kurz und gut, er musste so einfach zu bedienen sein, dass er f√ºr jeden Sch**ssdreck verwendet werden konnte.</p>

<p>Tja, und das habe ich geschafft.</p>

<p>Darf ich vorstellen: <a href="http://micwin.github.io/ticino/ticino-events/index.html">ticino events</a></p>

<p>Die ‚Äúcoolen Features‚Äù sind:</p>

<ul>
  <li>
    <p>weder Sender noch Empf√§nger eines Events m√ºssen wissen, dass es ticino events gibt; es k√∂nnen so also sich fremde Klassen 
nachtr√§glich verdrahtet werden ohne dass sie ein bestimmtes Interface bedienen m√ºssten.</p>
  </li>
  <li>
    <p>Ich rate zwar, dedizierte Event-Klassen zu verwenden; es ist aber nicht n√∂tig; man k√∂nnte 
also z.B. auch Java-Primitive verwenden, oder eine LinkedList, oder Java Interfaces, oder eine 
Lambda-Funktion, Future oder Promise.</p>
  </li>
  <li>
    <p>Sender und Empf√§nger werden in den <strong>EventScopes</strong> zusammengebracht; diese dienen auch gleich als 
Kapselung. Man kann also sensitive Concerns in dedizierten EventScopes kapseln, w√§hrend Allerwelt-
Events √ºber eine Art  ‚Äúglobalen EventScope‚Äù gehandhabt werden k√∂nnen.</p>
  </li>
  <li>
    <p>ticino hat keine dedizierten Event-Klassen,  Superklassen oder Abstrakt-Klassen von denen 
abgeleitet werdne muss. Wie oben erw√§hnt k√∂nnen alle bereits bestehende Klassen als Event-Klassen 
verwendet werden und sogar Primitive und Lambdas. Deshalb kann in den Event-Klassen jede Information 
einprogrammiert  werden, die Sender, Empf√§nger und/oder Betreiber interessieren.</p>
  </li>
  <li>
    <p>ticino-events k√∂nnen synchron und asynchron abgesetzt werden. Im Falle der asynchronen 
Verarbeitung kann bestimmt werden, ob die Empf√§nger seriell oder parallel aktiviert werden.</p>
  </li>
</ul>

<p>ticino events finden sich in der 
<a href="https://search.maven.org/artifact/net.micwin.ticino/ticino-events/0.3.6/jar">maven central</a>, die Dokumentation 
befindet sich <a href="http://micwin.github.io/ticino/ticino-events/index.html">hier</a>, das Repo <a href="https://github.com/micwin/ticino">hier</a></p>

<p>Leiderleider ist die Spring-Anbindung aber nicht sooo stabil wie ich das mir w√ºnsche, aber ich habe mir schon 
vorgenommen, in einem Moment der Mu√üe mach ich ticino Events perfekt.</p>

<h2 id="ticino-context-2015-und-sp√§ter">ticino context (2015 und sp√§ter)</h2>

<p>Als ich mit dem minimalistischen Ansatz angefangen hatte, hatte ich nat√ºrlich Blut geleckt. Da war noch ein anderes Problem, 
das mich an Java genervt hat: die Collections.</p>

<p>Kann mir bitte einer sagen, warum bei Java immer so getan wird, als ob alles mit allem kompatibel ist - nur um es dann 
im entscheidenden Fall doch nicht zu sein? Warum bitte m√ºssen ArrayLists und HashSets dasselbe Interface bedienen, es 
ist aber nicht m√∂glich, einen ArrayList mnit einem Array zu initisalisieren? ? ArrayLists und HashSets sind schon vom 
Konzept her komplett unterschiedliche Dinge wobei sich Arrays und ArrayLists nur durch die Kapselung und ein, zwei 
Details unterscheiden!</p>

<p>Also gut, dachte ich mir - probieren wir das mal. Was hatte ich f√ºr Anforderungen?</p>

<ul>
  <li>
    <p>keine Gemeinsamkeiten heucheln wo es keine gibt.</p>
  </li>
  <li>
    <p>Eigenschaften der Container sollten √ºber Funktionen abfragbar sein</p>
  </li>
  <li>
    <p>Natural fits unterst√ºtzen, also z.B. Arrays leicht in ArrayLists (und umgekehrt) umwandelbar machen.</p>
  </li>
  <li>
    <p>bessere Unterst√ºtzung von Generics</p>
  </li>
</ul>

<p>Et voil√† - <a href="http://micwin.github.io/ticino/ticino-context/index.html">ticino context</a> - wobei,‚Ä¶ geniesst das bitte 
mit Vorsicht, die Dokumentation ist crappy. 
Den Source Code findet ihr <a href="https://github.com/micwin/ticino/tree/develop/context/src/main/java/net/micwin/ticino/context">hier</a>, 
auf maven central ist das Projekt <a href="https://search.maven.org/artifact/net.micwin.ticino/ticino-context/0.3.6/jar">hier</a>.</p>

<p>Die Highlights:</p>

<ul>
  <li>
    <p>Element-Lookup mit Lambda</p>
  </li>
  <li>
    <p>Element-Validatoren, mit denen der Instanzierer des Containers sicherstellen kann, dass nur Elemente in den Container 
gehen, die einem Kriterium entsprechen</p>
  </li>
  <li>
    <p>Typsichere Unterscheidung von ReadOnly und ReadWrite-Containern</p>
  </li>
</ul>

<p>Das Projekt ist bei weitem nicht fertig und wurde leider schon weitestgehend, in den urspr√ºnglichen Anspr√ºchen, von den 
neuen Entwicklungen des JDK √ºberholt. Ich denke ich werde das Thema zwar aus reinem Interesse mal weiterf√ºhren, 
denke aber meine Bem√ºhungen sind eher akademischer Natur und werden wohl keine Verbreitung oder Anwendung finden.</p>

<h2 id="verspielt-chance2-2004-2006-open-space-2012-2014">verspielt: chance2 (2004-2006), open space (2012-2014)</h2>

<p>Hatte ich schon erw√§hnt dass ich Wicket-Fan war? Nun, ich habe sogar ein Spiel mit Wicket programmiert: <a href="https://github.com/micwin/open-space">open space</a>.</p>

<p>Entstanden ist open-space aus dem Verlangen heraus, mein erstes Computerspiel, chance2-online, upzugraden; 
das hatte ich 2004  mit jsp entwickelt; das war eine Katastrophe, darum wechselte ich dazwischen auf struts, dann wurde 
alles nur noch schlimmer; bis zu dem Punkt wo es einfach unwartbar wurde. 2006 schaltete ich dann den letzten Server ab 
und chance2 war tot.</p>

<p>Der Server jedoch steht immer noch in meinem Keller, ich kann mich einfach nicht davon trennen. Aber wie war es glorreich! 
Ich hatte zeitweilig um die 100 User. chance2 war ein Browser-bassiertes  Mass Multiplayer Online Strategy Game, 
mit frei konfigurierbaren Schiffstypen, und weiteren, atemberaubenden Ideen. Ich hatte sogar eine Designerin beauftragt, 
die mir Postkarten erstellte und druckte. Und das wollte ich mit open space wieder aufleben lassen. Aber dieses mal 
richtig!</p>

<p>Tja, was soll ich sagen. Wicket-Anwendungen lassen sich schwer warten, und Open-Space war keine Single-Page-Anwendung. 
Somit starb open-space auch wieder. Der letzte Commit datiert auf den 1. Februar 2014.</p>
:ET